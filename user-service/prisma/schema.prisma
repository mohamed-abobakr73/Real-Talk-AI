// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId String @id() @default(uuid())
  username String 
  email String @unique()
  password String?
  profileImage String? @default("https://ik.imagekit.io/RealTalk/tr:n-ik_ml_thumbnail/user-avatar_H3y7eWAOa.jpg")
  verified Boolean? @default(false)
  createdAt DateTime @default(now())

  connections   UserConnections[]  @relation("UserConnections_user")
  connectedTo   UserConnections[]  @relation("UserConnections_connectedUser")
}

model AuthProviders {
  id Int @id @default(autoincrement())
  userId String
  provider AuthProviderType
  authProviderId String
  createdAt DateTime @default(now())
}

model UserConnections {
  id               String   @id() @default(uuid())
  userId           String
  connectedUserId  String
  connectionStatus ConnectionStatus @default(pending)
  createdAt        DateTime @default(now())

  user             User     @relation("UserConnections_user", fields: [userId], references: [userId])
  connectedUser    User     @relation("UserConnections_connectedUser", fields: [connectedUserId], references: [userId])

  @@unique([userId, connectedUserId])
}

enum AuthProviderType {
  google
  github
}

enum ConnectionStatus {
  pending
  accepted
  blocked
}